
package io.bitnet.model.payment;

import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;


/**
 * invoice
 * <p>
 * A single Invoice
 * 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@Generated("org.jsonschema2pojo")
@JsonPropertyOrder({
    "id",
    "accountId",
    "orderId",
    "state",
    "reference",
    "quote",
    "amountReceived",
    "paymentAddress",
    "paymentUri",
    "requiredVerification",
    "confirmations",
    "refundIds",
    "createdAt",
    "modifiedAt",
    "expiresAt",
    "expired"
})
public class Invoice {

    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("id")
    @Pattern(regexp = "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$")
    @NotNull
    private String id;
    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("accountId")
    @Pattern(regexp = "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$")
    @NotNull
    private String accountId;
    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("orderId")
    @Pattern(regexp = "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$")
    @NotNull
    private String orderId;
    /**
     * Current condition of the Invoice
     * (Required)
     * 
     */
    @JsonProperty("state")
    @NotNull
    private Invoice.State state = Invoice.State.fromValue("OPEN");
    /**
     * Invoice Reference
     * 
     */
    @JsonProperty("reference")
    @Size(max = 50)
    private String reference;
    /**
     * The digital currency Quote
     * (Required)
     * 
     */
    @JsonProperty("quote")
    @Valid
    @NotNull
    private Quote quote;
    @JsonProperty("amountReceived")
    @Pattern(regexp = "^(\\d{1,8}(\\.\\d{1,8})?)?$")
    private String amountReceived;
    /**
     * One-time coin address to receive consumers payment (generated by Bitnet)
     * (Required)
     * 
     */
    @JsonProperty("paymentAddress")
    @Pattern(regexp = "^[13nm][a-km-zA-HJ-NP-Z1-9]{26,33}$")
    @NotNull
    private String paymentAddress;
    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("paymentUri")
    @NotNull
    private String paymentUri;
    /**
     * Merchant-defined confidence level required for any transaction to fulfil the Invoice amount
     * (Required)
     * 
     */
    @JsonProperty("requiredVerification")
    @NotNull
    private Integer requiredVerification;
    /**
     * The minimum confirmation level across all Payments made against the Invoice
     * 
     */
    @JsonProperty("confirmations")
    @Pattern(regexp = "^(0|[1-9]{1}[0-9]{0,5})$")
    private String confirmations = "0";
    /**
     * A collection of Refund identifiers
     * 
     */
    @JsonProperty("refundIds")
    @JsonDeserialize(as = java.util.LinkedHashSet.class)
    private Set<String> refundIds = new LinkedHashSet<String>();
    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("createdAt")
    @Pattern(regexp = "^\\d{4}-[0-1][0-9]-[0-3]\\d{1}T[0-2]\\d{1}:[0-5]\\d{1}:[0-5]\\d{1}[.]\\d{1,5}Z$")
    @NotNull
    private String createdAt;
    @JsonProperty("modifiedAt")
    @Pattern(regexp = "^\\d{4}-[0-1][0-9]-[0-3]\\d{1}T[0-2]\\d{1}:[0-5]\\d{1}:[0-5]\\d{1}[.]\\d{1,5}Z$")
    private String modifiedAt;
    @JsonProperty("expiresAt")
    @Pattern(regexp = "^\\d{4}-[0-1][0-9]-[0-3]\\d{1}T[0-2]\\d{1}:[0-5]\\d{1}:[0-5]\\d{1}[.]\\d{1,5}Z$")
    private String expiresAt;
    /**
     * True if the invoice has expired. Invoices will either expire at the time 'expiresAt' or if the invoice receives the full amount due. After an invoice is expired it will no longer accept any new payments.
     * 
     */
    @JsonProperty("expired")
    private Boolean expired = false;
    @JsonIgnore
    private Map<String, Object> additionalProperties = new HashMap<String, Object>();

    /**
     * 
     * (Required)
     * 
     * @return
     *     The id
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * 
     * (Required)
     * 
     * @param id
     *     The id
     */
    @JsonProperty("id")
    public void setId(String id) {
        this.id = id;
    }

    public Invoice withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * 
     * (Required)
     * 
     * @return
     *     The accountId
     */
    @JsonProperty("accountId")
    public String getAccountId() {
        return accountId;
    }

    /**
     * 
     * (Required)
     * 
     * @param accountId
     *     The accountId
     */
    @JsonProperty("accountId")
    public void setAccountId(String accountId) {
        this.accountId = accountId;
    }

    public Invoice withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }

    /**
     * 
     * (Required)
     * 
     * @return
     *     The orderId
     */
    @JsonProperty("orderId")
    public String getOrderId() {
        return orderId;
    }

    /**
     * 
     * (Required)
     * 
     * @param orderId
     *     The orderId
     */
    @JsonProperty("orderId")
    public void setOrderId(String orderId) {
        this.orderId = orderId;
    }

    public Invoice withOrderId(String orderId) {
        this.orderId = orderId;
        return this;
    }

    /**
     * Current condition of the Invoice
     * (Required)
     * 
     * @return
     *     The state
     */
    @JsonProperty("state")
    public Invoice.State getState() {
        return state;
    }

    /**
     * Current condition of the Invoice
     * (Required)
     * 
     * @param state
     *     The state
     */
    @JsonProperty("state")
    public void setState(Invoice.State state) {
        this.state = state;
    }

    public Invoice withState(Invoice.State state) {
        this.state = state;
        return this;
    }

    /**
     * Invoice Reference
     * 
     * @return
     *     The reference
     */
    @JsonProperty("reference")
    public String getReference() {
        return reference;
    }

    /**
     * Invoice Reference
     * 
     * @param reference
     *     The reference
     */
    @JsonProperty("reference")
    public void setReference(String reference) {
        this.reference = reference;
    }

    public Invoice withReference(String reference) {
        this.reference = reference;
        return this;
    }

    /**
     * The digital currency Quote
     * (Required)
     * 
     * @return
     *     The quote
     */
    @JsonProperty("quote")
    public Quote getQuote() {
        return quote;
    }

    /**
     * The digital currency Quote
     * (Required)
     * 
     * @param quote
     *     The quote
     */
    @JsonProperty("quote")
    public void setQuote(Quote quote) {
        this.quote = quote;
    }

    public Invoice withQuote(Quote quote) {
        this.quote = quote;
        return this;
    }

    /**
     * 
     * @return
     *     The amountReceived
     */
    @JsonProperty("amountReceived")
    public String getAmountReceived() {
        return amountReceived;
    }

    /**
     * 
     * @param amountReceived
     *     The amountReceived
     */
    @JsonProperty("amountReceived")
    public void setAmountReceived(String amountReceived) {
        this.amountReceived = amountReceived;
    }

    public Invoice withAmountReceived(String amountReceived) {
        this.amountReceived = amountReceived;
        return this;
    }

    /**
     * One-time coin address to receive consumers payment (generated by Bitnet)
     * (Required)
     * 
     * @return
     *     The paymentAddress
     */
    @JsonProperty("paymentAddress")
    public String getPaymentAddress() {
        return paymentAddress;
    }

    /**
     * One-time coin address to receive consumers payment (generated by Bitnet)
     * (Required)
     * 
     * @param paymentAddress
     *     The paymentAddress
     */
    @JsonProperty("paymentAddress")
    public void setPaymentAddress(String paymentAddress) {
        this.paymentAddress = paymentAddress;
    }

    public Invoice withPaymentAddress(String paymentAddress) {
        this.paymentAddress = paymentAddress;
        return this;
    }

    /**
     * 
     * (Required)
     * 
     * @return
     *     The paymentUri
     */
    @JsonProperty("paymentUri")
    public String getPaymentUri() {
        return paymentUri;
    }

    /**
     * 
     * (Required)
     * 
     * @param paymentUri
     *     The paymentUri
     */
    @JsonProperty("paymentUri")
    public void setPaymentUri(String paymentUri) {
        this.paymentUri = paymentUri;
    }

    public Invoice withPaymentUri(String paymentUri) {
        this.paymentUri = paymentUri;
        return this;
    }

    /**
     * Merchant-defined confidence level required for any transaction to fulfil the Invoice amount
     * (Required)
     * 
     * @return
     *     The requiredVerification
     */
    @JsonProperty("requiredVerification")
    public Integer getRequiredVerification() {
        return requiredVerification;
    }

    /**
     * Merchant-defined confidence level required for any transaction to fulfil the Invoice amount
     * (Required)
     * 
     * @param requiredVerification
     *     The requiredVerification
     */
    @JsonProperty("requiredVerification")
    public void setRequiredVerification(Integer requiredVerification) {
        this.requiredVerification = requiredVerification;
    }

    public Invoice withRequiredVerification(Integer requiredVerification) {
        this.requiredVerification = requiredVerification;
        return this;
    }

    /**
     * The minimum confirmation level across all Payments made against the Invoice
     * 
     * @return
     *     The confirmations
     */
    @JsonProperty("confirmations")
    public String getConfirmations() {
        return confirmations;
    }

    /**
     * The minimum confirmation level across all Payments made against the Invoice
     * 
     * @param confirmations
     *     The confirmations
     */
    @JsonProperty("confirmations")
    public void setConfirmations(String confirmations) {
        this.confirmations = confirmations;
    }

    public Invoice withConfirmations(String confirmations) {
        this.confirmations = confirmations;
        return this;
    }

    /**
     * A collection of Refund identifiers
     * 
     * @return
     *     The refundIds
     */
    @JsonProperty("refundIds")
    public Set<String> getRefundIds() {
        return refundIds;
    }

    /**
     * A collection of Refund identifiers
     * 
     * @param refundIds
     *     The refundIds
     */
    @JsonProperty("refundIds")
    public void setRefundIds(Set<String> refundIds) {
        this.refundIds = refundIds;
    }

    public Invoice withRefundIds(Set<String> refundIds) {
        this.refundIds = refundIds;
        return this;
    }

    /**
     * 
     * (Required)
     * 
     * @return
     *     The createdAt
     */
    @JsonProperty("createdAt")
    public String getCreatedAt() {
        return createdAt;
    }

    /**
     * 
     * (Required)
     * 
     * @param createdAt
     *     The createdAt
     */
    @JsonProperty("createdAt")
    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public Invoice withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * 
     * @return
     *     The modifiedAt
     */
    @JsonProperty("modifiedAt")
    public String getModifiedAt() {
        return modifiedAt;
    }

    /**
     * 
     * @param modifiedAt
     *     The modifiedAt
     */
    @JsonProperty("modifiedAt")
    public void setModifiedAt(String modifiedAt) {
        this.modifiedAt = modifiedAt;
    }

    public Invoice withModifiedAt(String modifiedAt) {
        this.modifiedAt = modifiedAt;
        return this;
    }

    /**
     * 
     * @return
     *     The expiresAt
     */
    @JsonProperty("expiresAt")
    public String getExpiresAt() {
        return expiresAt;
    }

    /**
     * 
     * @param expiresAt
     *     The expiresAt
     */
    @JsonProperty("expiresAt")
    public void setExpiresAt(String expiresAt) {
        this.expiresAt = expiresAt;
    }

    public Invoice withExpiresAt(String expiresAt) {
        this.expiresAt = expiresAt;
        return this;
    }

    /**
     * True if the invoice has expired. Invoices will either expire at the time 'expiresAt' or if the invoice receives the full amount due. After an invoice is expired it will no longer accept any new payments.
     * 
     * @return
     *     The expired
     */
    @JsonProperty("expired")
    public Boolean getExpired() {
        return expired;
    }

    /**
     * True if the invoice has expired. Invoices will either expire at the time 'expiresAt' or if the invoice receives the full amount due. After an invoice is expired it will no longer accept any new payments.
     * 
     * @param expired
     *     The expired
     */
    @JsonProperty("expired")
    public void setExpired(Boolean expired) {
        this.expired = expired;
    }

    public Invoice withExpired(Boolean expired) {
        this.expired = expired;
        return this;
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    @JsonAnySetter
    public void setAdditionalProperty(String name, Object value) {
        this.additionalProperties.put(name, value);
    }

    public Invoice withAdditionalProperty(String name, Object value) {
        this.additionalProperties.put(name, value);
        return this;
    }

    @Override
    public int hashCode() {
        return new HashCodeBuilder().append(id).append(accountId).append(orderId).append(state).append(reference).append(quote).append(amountReceived).append(paymentAddress).append(paymentUri).append(requiredVerification).append(confirmations).append(refundIds).append(createdAt).append(modifiedAt).append(expiresAt).append(expired).append(additionalProperties).toHashCode();
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Invoice) == false) {
            return false;
        }
        Invoice rhs = ((Invoice) other);
        return new EqualsBuilder().append(id, rhs.id).append(accountId, rhs.accountId).append(orderId, rhs.orderId).append(state, rhs.state).append(reference, rhs.reference).append(quote, rhs.quote).append(amountReceived, rhs.amountReceived).append(paymentAddress, rhs.paymentAddress).append(paymentUri, rhs.paymentUri).append(requiredVerification, rhs.requiredVerification).append(confirmations, rhs.confirmations).append(refundIds, rhs.refundIds).append(createdAt, rhs.createdAt).append(modifiedAt, rhs.modifiedAt).append(expiresAt, rhs.expiresAt).append(expired, rhs.expired).append(additionalProperties, rhs.additionalProperties).isEquals();
    }

    @Generated("org.jsonschema2pojo")
    public static enum State {

        OPEN("OPEN"),
        PAID("PAID"),
        PENDING("PENDING"),
        OVERPAID("OVERPAID"),
        UNDERPAID("UNDERPAID"),
        CANCELED("CANCELED"),
        UNPAID("UNPAID");
        private final String value;
        private static Map<String, Invoice.State> constants = new HashMap<String, Invoice.State>();

        static {
            for (Invoice.State c: values()) {
                constants.put(c.value, c);
            }
        }

        private State(String value) {
            this.value = value;
        }

        @JsonValue
        @Override
        public String toString() {
            return this.value;
        }

        @JsonCreator
        public static Invoice.State fromValue(String value) {
            Invoice.State constant = constants.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("id", id).append("accountId", accountId).append("orderId", orderId).append("state", state).append("reference", reference).append("quote", quote).append("amountReceived", amountReceived).append("paymentAddress", paymentAddress).append("paymentUri", paymentUri).append("requiredVerification", requiredVerification).append("confirmations", confirmations).append("refundIds", refundIds).append("createdAt", createdAt).append("modifiedAt", modifiedAt).append("expiresAt", expiresAt).append("expired", expired).append("additionalProperties", additionalProperties).toString();
    }
}
